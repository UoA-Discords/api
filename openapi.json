{
    "openapi": "3.0.3",
    "info": {
        "title": "UoA Discords API",
        "description": "Backend API for the Uoa Discords project.",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/UoA-Discords/api"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/UoA-Discords/api/blob/main/LICENSE"
        },
        "version": "1.1.0"
    },
    "servers": [
        {
            "url": "http://localhost:3001",
            "description": "Development (Local)"
        },
        {
            "url": "http://ntgc.ddns.net:3001",
            "description": "Development (Remote)"
        },
        {
            "url": "https://bpi.uoa-discords.com",
            "description": "Production"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": ["Other"],
                "description": "Checks API status, version, uptime, and other stats.<br /><br />*Permission Level: 0 (None)*",
                "responses": {
                    "200": {
                        "description": "Various API information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": ["version", "startedAt", "entryStats", "users", "applyRequirements"],
                                    "properties": {
                                        "version": {
                                            "type": "string",
                                            "example": "1.23.45"
                                        },
                                        "startedAt": {
                                            "type": "string",
                                            "example": "2022-08-11T07:21:52.062Z"
                                        },
                                        "entryStats": {
                                            "type": "object",
                                            "required": [
                                                "pending",
                                                "approved",
                                                "featured",
                                                "denied",
                                                "withdrawn",
                                                "optOut"
                                            ],
                                            "properties": {
                                                "pending": {
                                                    "type": "integer"
                                                },
                                                "approved": {
                                                    "type": "integer"
                                                },
                                                "featured": {
                                                    "type": "integer"
                                                },
                                                "denied": {
                                                    "type": "integer"
                                                },
                                                "withdrawn": {
                                                    "type": "integer"
                                                },
                                                "optOut": {
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "users": {
                                            "type": "integer"
                                        },
                                        "applyRequirements": {
                                            "type": "object",
                                            "required": ["memberCount", "verificationLevel"],
                                            "properties": {
                                                "memberCount": {
                                                    "type": "number"
                                                },
                                                "verificationLevel": {
                                                    "type": "number",
                                                    "minimum": 0,
                                                    "maximum": 4
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/ip": {
            "get": {
                "tags": ["Other"],
                "description": "Returns IP address of client, useful for [configuring proxies](https://www.npmjs.com/package/express-rate-limit#:~:text=Troubleshooting%20Proxy%20Issues).<br /><br />*Permission Level: 0 (None)*",
                "responses": {
                    "200": {
                        "description": "IP address of client, might be `::1` if viewing from same network.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string",
                                    "example": "123.123.123.123"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/discord/example": {
            "get": {
                "tags": ["Login Process"],
                "description": "Returns an example Discord OAuth2 authorization link creation function.",
                "responses": {
                    "200": {
                        "description": "Source code.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/discord/login": {
            "post": {
                "tags": ["Login Process"],
                "description": "Complete the Discord OAuth2 login process, returning a Discord access token.<br /><br />*Permission Level: 1 (Like)*",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["code", "redirect_uri"],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "description": "OAuth2 code returned by Discord authorization endpoint."
                                    },
                                    "redirect_uri": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/discord/refresh": {
            "get": {
                "tags": ["Login Process"],
                "description": "Refreshes Discord access token<br /><br />*Permission Level: 1 (Like)*",
                "responses": {
                    "200": {
                        "description": "Refresh successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/discord/logout": {
            "get": {
                "tags": ["Login Process"],
                "description": "Revokes Discord access token.<br /><br />*Permission Level: 0 (None)*",

                "responses": {
                    "200": {
                        "description": "Revocation successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/entries": {
            "get": {
                "tags": ["Core"],
                "description": "Gets all approved and featured entries.<br /><br />*Permission Level: 0 (None)*",
                "responses": {
                    "200": {
                        "description": "All approved and featured entries.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": ["approved", "featured"],
                                    "properties": {
                                        "approved": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FullEntry"
                                            }
                                        },
                                        "featured": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FullEntry"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/entries/{state}": {
            "get": {
                "tags": ["Core"],
                "description": "Gets all entries of a certain state.<br /><br />*Permission Level: 4 (Moderator)*",
                "parameters": [
                    {
                        "name": "state",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All entries of the specified state.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BaseEntry"
                                    }
                                }
                            }
                        }
                    },
                    "400": { "$ref": "#/components/responses/400" },
                    "401": { "$ref": "#/components/responses/401" },
                    "429": { "$ref": "#/components/responses/429" }
                }
            }
        },
        "/entries/{state}/{id}/state": {
            "patch": {
                "tags": ["Entry Modification"],
                "description": "Changes the state of an entry.<br /><br />*Permission Level: 4 (Moderator)*",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["newState"],
                                "properties": {
                                    "newState": {
                                        "type": "number"
                                    },
                                    "reason": {
                                        "type": "string",
                                        "description": "Reason for withdrawal or denial, if doing so."
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "State updated successfully."
                    },
                    "204": {
                        "description": "State was already this."
                    },
                    "400": { "$ref": "#/components/responses/400" },
                    "401": { "$ref": "#/components/responses/401" },
                    "404": { "description": "An entry with that state and ID does not exist." },
                    "429": { "$ref": "#/components/responses/429" }
                }
            }
        },
        "/entries/{state}/{id}/tags": {
            "patch": {
                "tags": ["Entry Modification"],
                "description": "Changes the tags of an entry.<br /><br />*Permission Level: 4 (Moderator)*",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["tags"],
                                "properties": {
                                    "tags": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tags updated successfully."
                    },
                    "400": { "$ref": "#/components/responses/400" },
                    "401": { "$ref": "#/components/responses/401" },
                    "404": { "description": "An entry with that state and ID does not exist." },
                    "429": { "$ref": "#/components/responses/429" }
                }
            }
        },
        "/entries/optout": {
            "get": {
                "tags": ["Core"],
                "description": "Gets all opt-out entries.<br /><br />*Permission Level: 4 (Moderator)*",
                "responses": {
                    "200": {
                        "description": "Array of opt-out entries.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OptOutEntry"
                                }
                            }
                        }
                    },
                    "400": { "$ref": "#/components/responses/400" },
                    "401": { "$ref": "#/components/responses/401" },
                    "429": { "$ref": "#/components/responses/429" }
                }
            },
            "post": {
                "tags": ["Entry Modification"],
                "description": "Creates an opt-out entry.<br /><br />*Permission Level: 4 (Moderator)*",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["onBehalfOf", "guildId"],
                                "description": "User ID of the admin/owner of the opt-out guild who requested the opt-out.",
                                "type": "object",
                                "properties": {
                                    "onBehalfOf": {
                                        "type": "string"
                                    },
                                    "guildId": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Opt-out successful."
                    },
                    "204": {
                        "description": "This guild was already opted-out."
                    },
                    "400": { "$ref": "#/components/responses/400" },
                    "401": { "$ref": "#/components/responses/401" },
                    "429": { "$ref": "#/components/responses/429" }
                }
            },
            "delete": {
                "tags": ["Entry Modification"],
                "description": "Removes an opt-out entry.<br /><br />*Permission Level: 5 (Admin)*",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "additionalProperties": false,
                                "required": ["guildId"],
                                "properties": {
                                    "guildId": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Opt-out successful."
                    },
                    "204": {
                        "description": "This guild was already opted-out."
                    },
                    "400": { "$ref": "#/components/responses/400" },
                    "404": { "description": "An opt-out guild with that ID does not exist." },
                    "401": { "$ref": "#/components/responses/401" },
                    "429": { "$ref": "#/components/responses/429" }
                }
            }
        },
        "/entries/{id}/likes": {
            "patch": {
                "tags": ["Entry Modification"],
                "description": "Likes, or removes a like of an entry.<br /><br />*Permission Level: 1 (Like)*",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["like"],
                                "properties": {
                                    "like": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The entry was (un)liked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "description": "An approved entry with that ID does not exist."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Gets all users.<br /><br />*Permission Level: 4 (Moderator)*",
                "tags": ["User Management"],
                "responses": {
                    "200": {
                        "description": "Array of all users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SiteUser"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Gets a user by the given ID.<br /><br />*Permission Level: 4 (Moderator)*",
                "tags": ["User Management"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SiteUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "description": "User with that ID does not exist."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/users/{id}/perms": {
            "patch": {
                "tags": ["User Management"],
                "description": "Modifies the permission level of a user.<br /><br />*Permission Level: 5 (Admin)*",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["newPermissionLevel"],
                                "properties": {
                                    "newPermissionLevel": {
                                        "type": "number",
                                        "example": 0
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "description": "A user with that ID does not exist."
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/entries/pending/me": {
            "get": {
                "tags": ["Core"],
                "description": "Gets pending applications of current user.<br /><br />*Permission Level: 0 (None)*",
                "responses": {
                    "200": {
                        "description": "Array of pending applications made by the client.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PendingEntry"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/apply": {
            "post": {
                "tags": ["Core"],
                "description": "Makes a server application.<br /><br />*Permission Level: 2 (Default)*",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["inviteCode", "tags"],
                                "properties": {
                                    "inviteCode": {
                                        "type": "string"
                                    },
                                    "tags": {
                                        "type": "array",
                                        "nullable": true,
                                        "items": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Application made successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        },
        "/api-docs": {
            "get": {
                "tags": ["Other"],
                "description": "Gets this document. Note that this is one of the only 2 endpoints that are not ratelimited.<br /><br />*Permission Level: 0 (None)*",
                "security": [],
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "This document."
                    }
                }
            }
        },
        "/spec": {
            "get": {
                "tags": ["Other"],
                "description": "Gets the underlying JSON data that is displayed in this document. Note that this is one of the only 2 endpoints that are not ratelimited.<br /><br />*Permission Level: 0 (None)*",
                "security": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OpenAPI specification."
                    }
                }
            }
        },
        "/staff": {
            "get": {
                "tags": ["User Management"],
                "description": "Gets a list of all staff members.<br /><br />*Permission Level: 0 (None)*",
                "responses": {
                    "200": {
                        "description": "List of moderators, admins, and owners.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": ["moderators", "admins", "owners"],
                                    "type": "object",
                                    "properties": {
                                        "moderators": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SiteUser"
                                            }
                                        },
                                        "admins": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SiteUser"
                                            }
                                        },
                                        "owners": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SiteUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/429"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "EntryStates": {
                "type": "integer",
                "minimum": 0,
                "maximum": 4,
                "description": "Possible state of the entry; Pending(0), Approved(1), Featured(2), Denied(3), or Withdrawn(4)."
            },
            "UserPermissionLevels": {
                "type": "integer",
                "minimum": 0,
                "maximum": 6,
                "description": "Possible user permission levels; None(0), Like(1), Default(2), Elevated(3), Moderator(4), Administrator(5), or Owner(6)."
            },
            "SiteUser": {
                "type": "object",
                "description": "Some of the user data stored on the server, the first 5 properties are from the [Discord API user object](https://discord.com/developers/docs/resources/user#user-object).",
                "required": [
                    "id",
                    "username",
                    "discriminator",
                    "avatar",
                    "firstLogin",
                    "lastLogin",
                    "permissionLevel",
                    "myApplicationStats",
                    "myAdminStats"
                ],
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Discord ID of this user."
                    },
                    "username": {
                        "type": "string"
                    },
                    "discriminator": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string",
                        "nullable": true
                    },
                    "public_flags": {
                        "type": "integer"
                    },
                    "firstLogin": {
                        "type": "string",
                        "example": "2022-08-11T05:22:42.140Z"
                    },
                    "lastLogin": {
                        "type": "string",
                        "example": "2022-08-11T05:22:42.140Z",
                        "description": "Last login or refresh."
                    },
                    "permissionLevel": {
                        "$ref": "#/components/schemas/UserPermissionLevels"
                    },
                    "myApplicationStats": {
                        "type": "object",
                        "required": ["0", "1", "2", "3", "4"],
                        "description": "Number of applications this user currently has, indexed by entry state.",
                        "properties": {
                            "0": {
                                "type": "number"
                            },
                            "1": {
                                "type": "number"
                            },
                            "2": {
                                "type": "number"
                            },
                            "3": {
                                "type": "number"
                            },
                            "4": {
                                "type": "number"
                            }
                        }
                    },
                    "myAdminStats": {
                        "type": "object",
                        "required": ["1", "2", "3", "4"],
                        "description": "Number of entry state modifications this user has made, indexed by entry state changed to.",
                        "properties": {
                            "1": {
                                "type": "number"
                            },
                            "2": {
                                "type": "number"
                            },
                            "3": {
                                "type": "number"
                            },
                            "4": {
                                "type": "number"
                            }
                        }
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP address of this user, only available to owner."
                    },
                    "likes": {
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "List of guild IDs that this user has liked, only available to admins or above."
                    }
                }
            },
            "AccessTokenResponse": {
                "type": "object",
                "description": "Object returned from a Discord OAuth2 token routes, see the official [Discord API docs](https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-response) for more info.",
                "required": ["access_token", "token_type", "expires_in", "refresh_token", "scope"],
                "additionalProperties": false,
                "properties": {
                    "access_token": {
                        "type": "string"
                    },
                    "token_type": {
                        "type": "string",
                        "default": "Bearer"
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "How long, in seconds, until the returned access token expires.",
                        "default": 604800
                    },
                    "refresh_token": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string",
                        "default": "identify"
                    }
                }
            },
            "LoginResponse": {
                "type": "object",
                "description": "Object returned from a successful login or refresh request.",
                "required": ["discordAuth", "siteAuth", "userData"],
                "additionalProperties": false,
                "properties": {
                    "discordAuth": {
                        "$ref": "#/components/schemas/AccessTokenResponse"
                    },
                    "siteAuth": {
                        "type": "string",
                        "description": "JsonWebToken to use for any elevated requests to this API."
                    },
                    "userData": {
                        "allOf": [{ "$ref": "#/components/schemas/SiteUser" }],
                        "required": ["ip", "likes"]
                    }
                }
            },
            "BasicUserInfo": {
                "description": "Basic user information, used to display a user without having to make more API calls to get their full profile (if it exists).",
                "type": "object",
                "required": ["id", "username", "discriminator", "avatar", "permissionLevel"],
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "discriminator": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string",
                        "nullable": true
                    },
                    "permissionLevel": {
                        "$ref": "#/components/schemas/UserPermissionLevels"
                    }
                }
            },
            "GuildData": {
                "type": "object",
                "additionalProperties": false,
                "required": ["name", "icon", "splash", "banner", "description", "verificationLevel"],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "splash": {
                        "type": "string",
                        "nullable": true
                    },
                    "banner": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "verificationLevel": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4
                    }
                }
            },
            "BaseEntry": {
                "type": "object",
                "required": [
                    "id",
                    "state",
                    "inviteCode",
                    "inviteCreatedBy",
                    "guildData",
                    "memberCountHistory",
                    "createdBy",
                    "createdAt",
                    "likes",
                    "facultyTags"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Discord ID of the guild associated with this entry."
                    },
                    "state": {
                        "$ref": "#/components/schemas/EntryStates"
                    },
                    "inviteCode": {
                        "type": "string",
                        "description": "Invite code, without the 'discord.gg/' prefix."
                    },
                    "inviteCreatedBy": {
                        "anyOf": [{ "$ref": "#/components/schemas/BasicUserInfo" }, { "nullable": true }],
                        "description": "Who created this invite, can be null since some invites are not created by users."
                    },
                    "guildData": {
                        "$ref": "#/components/schemas/GuildData"
                    },
                    "memberCountHistory": {
                        "type": "array",
                        "description": "Array of member and online count, up to the last 30 days. With the first tuple in the array being the oldest.",
                        "items": {
                            "type": "array",
                            "minLength": 2,
                            "maxLength": 2,
                            "items": {
                                "type": "number",
                                "minimum": 0,
                                "description": "Tuple of [online, total] members for that day."
                            }
                        },
                        "minLength": 0,
                        "maxLength": 30
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/BasicUserInfo"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2022-08-11T05:22:42.140Z"
                    },
                    "likes": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "facultyTags": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "minimum": 0
                        }
                    }
                }
            },
            "PendingEntry": {
                "type": "object",
                "allOf": [{ "$ref": "#/components/schemas/BaseEntry" }],
                "required": ["state"],
                "properties": {
                    "state": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 0,
                        "default": 0
                    }
                }
            },
            "FullEntry": {
                "type": "object",
                "allOf": [{ "$ref": "#/components/schemas/BaseEntry" }],
                "required": ["state", "stateActionDoneBy", "stateActionDoneAt", "stateActionReason"],
                "properties": {
                    "state": {
                        "type": "integer",
                        "minimum": 1
                    },
                    "stateActionDoneBy": {
                        "anyOf": [{ "$ref": "#/components/schemas/BasicUserInfo" }, { "nullable": true }],
                        "description": "User who transitioned this entry into its latest state, may be null if the entry was automatically withdrawn."
                    },
                    "stateActionDoneAt": {
                        "type": "string",
                        "example": "2022-08-11T05:22:42.140Z"
                    },
                    "stateActionReason": {
                        "type": "string",
                        "nullable": true,
                        "description": "Reason for change in state, null for every state besides withdrawn and denied."
                    }
                }
            },
            "OptOutEntry": {
                "required": ["id", "optedOutBy", "doneBy", "doneAt"],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "optedOutBy": {
                        "type": "string"
                    },
                    "doneBy": {
                        "$ref": "#/components/schemas/BasicUserInfo"
                    },
                    "doneAt": {
                        "type": "string",
                        "example": "2022-08-11T05:22:42.140Z"
                    }
                }
            }
        },
        "responses": {
            "400": {
                "description": "Bad request.",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": ["shortMessage", "longMessage", "fixMessage"],
                            "properties": {
                                "shortMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "Invalid Access Token"
                                },
                                "longMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "An invalid access_token was provided in the \"Authorization\" header."
                                },
                                "fixMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "Log out, then log back into the website."
                                }
                            }
                        }
                    }
                }
            },
            "401": {
                "description": "Unauthorized.",
                "headers": {
                    "Perms-RequiredLevel": {
                        "required": true,
                        "description": "Required permission level to do this action.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "Perms-CurrentLevel": {
                        "required": true,
                        "description": "Current permission level of user, will be the default permission level (2) if user could not be authenticated.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            },
            "429": {
                "description": "Too many requests, rate limited. All endpoints give the following headers.",
                "headers": {
                    "RateLimit-Limit": {
                        "required": true,
                        "description": "Maximum number of requests per time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Remaining": {
                        "required": true,
                        "description": "Number of requests remaining in this time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Reset": {
                        "required": true,
                        "description": "Number of seconds until this time window ends.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "Retry-After": {
                        "required": true,
                        "description": "Length of time window in seconds.",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "siteToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT signed by server, contains Discord access token and user ID."
            },
            "rateLimitBypassToken": {
                "type": "apiKey",
                "description": "Token for bypassing ratelimits.",
                "name": "RateLimit-Bypass-Token",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Core",
            "description": "Operations that can usually be done by anyone, and pertain to core site functionality."
        },
        {
            "name": "Entry Modification",
            "description": "Operations on existing entries, most of these (besides like) require a permission level of 4 (Moderator) or above."
        },
        {
            "name": "Login Process",
            "description": "Operations for logging in to the site via Discord. These endpoints usually require a permission level of 1 (Like) or above."
        },
        {
            "name": "User Management",
            "description": "Operations to get all users, or modify existing users permission levels, these endpoints usually require a permission level of 5 (Admin) or above."
        },
        {
            "name": "Other",
            "description": "Miscellaneous operations."
        }
    ],
    "security": [{}, { "siteToken": [] }, { "rateLimitBypassToken": [] }]
}
